name: Build Android APK (DEFINITIVE)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    steps:
    - name: 🔄 Checkout repository
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: ☕ Setup Java 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
        
    - name: 🤖 Setup Android SDK
      uses: android-actions/setup-android@v3
      with:
        api-level: 33
        build-tools: 33.0.0
        
    - name: 📦 Install dependencies
      run: |
        echo "📦 Installing npm dependencies..."
        npm ci --prefer-offline --no-audit
        echo "✅ Dependencies installed"
        
    - name: 🔥 Create Firebase config
      run: |
        echo "🔥 Creating Firebase configuration..."
        cat > firebase-config.js << 'EOF'
        export const firebaseConfig = {
          apiKey: "AIzaSyBvOkBw0imfgIXsOKapeSyMvT0FgkNw",
          authDomain: "${{ secrets.FIREBASE_PROJECT_ID || 'sentinel-ai-769c5' }}.firebaseapp.com",
          projectId: "${{ secrets.FIREBASE_PROJECT_ID || 'sentinel-ai-769c5' }}",
          storageBucket: "${{ secrets.FIREBASE_PROJECT_ID || 'sentinel-ai-769c5' }}.appspot.com",
          messagingSenderId: "123456789",
          appId: "1:123456789:android:abc123def456"
        };
        EOF
        echo "✅ Firebase config created"
        
    - name: 🎨 Create basic assets
      run: |
        echo "🎨 Creating basic app assets..."
        mkdir -p assets/images
        
        # Create a simple PNG icon using base64
        echo "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNkYPhfDwAChwGA60e6kgAAAABJRU5ErkJggg==" | base64 -d > assets/images/icon.png
        echo "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNkYPhfDwAChwGA60e6kgAAAABJRU5ErkJggg==" | base64 -d > assets/images/splash.png
        echo "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNkYPhfDwAChwGA60e6kgAAAABJRU5ErkJggg==" | base64 -d > assets/images/adaptive-icon.png
        
        echo "✅ Basic assets created"
        
    - name: 🛠️ Install Expo CLI
      run: |
        echo "🛠️ Installing Expo CLI..."
        npm install -g @expo/cli@latest
        echo "✅ Expo CLI installed"
        
    - name: 🧹 Clean and prebuild
      run: |
        echo "🧹 Cleaning previous builds..."
        rm -rf android ios .expo
        echo "🔨 Running Expo prebuild..."
        npx expo prebuild --platform android --no-install
        echo "✅ Prebuild completed"
        
    - name: 🔧 Configure Android build
      run: |
        cd android
        
        echo "🔧 Configuring Gradle properties..."
        cat > gradle.properties << 'EOF'
        # Project-wide Gradle settings
        org.gradle.jvmargs=-Xmx4096m -XX:MaxMetaspaceSize=1024m -XX:+HeapDumpOnOutOfMemoryError
        org.gradle.parallel=false
        org.gradle.configureondemand=false
        org.gradle.daemon=false
        org.gradle.caching=false
        
        # Android settings
        android.useAndroidX=true
        android.enableJetifier=true
        android.compileSdkVersion=33
        android.targetSdkVersion=33
        android.buildToolsVersion=33.0.0
        
        # Disable unnecessary features
        android.enableR8.fullMode=false
        android.enableBuildCache=false
        android.enableD8.desugaring=false
        
        # React Native settings
        reactNativeArchitectures=armeabi-v7a,arm64-v8a
        hermesEnabled=true
        newArchEnabled=false
        EOF
        
        echo "🔧 Configuring app build.gradle..."
        # Ensure debug build type exists and is properly configured
        if [ -f "app/build.gradle" ]; then
          # Add debug configuration if not exists
          if ! grep -q "buildTypes" app/build.gradle; then
            cat >> app/build.gradle << 'EOF'

android {
    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}
EOF
          fi
        fi
        
        echo "✅ Android build configured"
        
    - name: 🚀 Build APK with multiple strategies
      run: |
        cd android
        
        echo "🚀 ===== DEFINITIVE APK BUILD ====="
        echo "📅 Build started at: $(date)"
        
        # Function to build APK with specific strategy
        build_apk() {
          local strategy=$1
          local timeout_mins=$2
          echo ""
          echo "🔨 ===== STRATEGY: $strategy ====="
          echo "⏰ Started at: $(date)"
          
          case $strategy in
            "assembleDebug")
              timeout ${timeout_mins}m ./gradlew assembleDebug \
                --no-daemon \
                --stacktrace \
                --info \
                --no-build-cache \
                -Dorg.gradle.jvmargs="-Xmx4096m -XX:MaxMetaspaceSize=1024m" \
                2>&1 | tee "build_${strategy}.log"
              ;;
            "clean_assembleDebug")
              timeout ${timeout_mins}m ./gradlew clean assembleDebug \
                --no-daemon \
                --stacktrace \
                --info \
                --no-build-cache \
                2>&1 | tee "build_${strategy}.log"
              ;;
            "app_assembleDebug")
              timeout ${timeout_mins}m ./gradlew :app:assembleDebug \
                --no-daemon \
                --stacktrace \
                --info \
                2>&1 | tee "build_${strategy}.log"
              ;;
            "bundleDebug")
              timeout ${timeout_mins}m ./gradlew bundleDebug \
                --no-daemon \
                --stacktrace \
                --info \
                2>&1 | tee "build_${strategy}.log"
              ;;
          esac
          
          local exit_code=$?
          echo "⏰ Finished at: $(date)"
          echo "📊 Exit code: $exit_code"
          
          # Check for APK immediately
          echo "🔍 Checking for APK after $strategy:"
          if find . -name "*.apk" -type f 2>/dev/null | head -5; then
            echo "🎉 APK FOUND with strategy: $strategy"
            return 0
          elif find . -name "*.aab" -type f 2>/dev/null | head -5; then
            echo "🎉 AAB FOUND with strategy: $strategy"
            return 0
          else
            echo "❌ No APK/AAB found with strategy: $strategy"
            echo "📋 Last 20 lines of log:"
            tail -20 "build_${strategy}.log" 2>/dev/null || echo "No log file"
            return 1
          fi
        }
        
        # Try different strategies with increasing timeouts
        if build_apk "assembleDebug" "15"; then
          echo "✅ SUCCESS: assembleDebug"
        elif build_apk "clean_assembleDebug" "20"; then
          echo "✅ SUCCESS: clean + assembleDebug"
        elif build_apk "app_assembleDebug" "15"; then
          echo "✅ SUCCESS: app:assembleDebug"
        elif build_apk "bundleDebug" "15"; then
          echo "✅ SUCCESS: bundleDebug (AAB)"
        else
          echo "💥 ===== ALL STRATEGIES FAILED ====="
          echo "📊 System state:"
          free -h
          df -h
          echo ""
          echo "📋 Available Gradle tasks:"
          ./gradlew tasks | grep -i assemble || echo "No assemble tasks found"
          echo ""
          echo "📁 Project structure:"
          find . -maxdepth 3 -type d | sort
          echo ""
          echo "📋 All log files:"
          ls -la *.log 2>/dev/null || echo "No log files"
          echo ""
          echo "🔍 Error summary from all logs:"
          for log in *.log; do
            if [ -f "$log" ]; then
              echo "--- Errors from $log ---"
              grep -i "BUILD FAILED\|FAILURE:\|error.*failed\|exception" "$log" | head -3
            fi
          done
          exit 1
        fi
        
    - name: 📱 Find and verify APK
      run: |
        echo "📱 ===== FINDING GENERATED APK/AAB ====="
        
        # Comprehensive search for build outputs
        echo "🔍 Searching for APK files:"
        find . -name "*.apk" -type f | while read apk; do
          echo "📱 Found APK: $apk"
          ls -lh "$apk"
          file "$apk"
        done
        
        echo "🔍 Searching for AAB files:"
        find . -name "*.aab" -type f | while read aab; do
          echo "📦 Found AAB: $aab"
          ls -lh "$aab"
          file "$aab"
        done
        
        # Set APK path for upload
        APK_PATH=$(find . -name "*.apk" -type f | head -1)
        AAB_PATH=$(find . -name "*.aab" -type f | head -1)
        
        if [ -n "$APK_PATH" ]; then
          echo "APK_PATH=$APK_PATH" >> $GITHUB_ENV
          echo "BUILD_TYPE=APK" >> $GITHUB_ENV
          echo "BUILD_FILE=$APK_PATH" >> $GITHUB_ENV
          echo "✅ APK found: $APK_PATH"
        elif [ -n "$AAB_PATH" ]; then
          echo "AAB_PATH=$AAB_PATH" >> $GITHUB_ENV
          echo "BUILD_TYPE=AAB" >> $GITHUB_ENV
          echo "BUILD_FILE=$AAB_PATH" >> $GITHUB_ENV
          echo "✅ AAB found: $AAB_PATH"
        else
          echo "❌ No APK or AAB found"
          exit 1
        fi
        
    - name: 📋 Upload APK/AAB artifact
      uses: actions/upload-artifact@v4
      with:
        name: sentinel-copilot-${{ env.BUILD_TYPE }}-${{ github.run_number }}
        path: ${{ env.BUILD_FILE }}
        retention-days: 30
        
    - name: 🚀 Create Release
      if: github.ref == 'refs/heads/main'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v1.0.${{ github.run_number }}
        release_name: Sentinel Copilot v1.0.${{ github.run_number }}
        body: |
          🚀 **Sentinel Copilot Mobile App**
          
          📱 **Build Type**: ${{ env.BUILD_TYPE }}
          📅 **Build Date**: ${{ github.event.head_commit.timestamp }}
          🔧 **Commit**: ${{ github.sha }}
          
          ### 📦 Download
          - Download the ${{ env.BUILD_TYPE }} from the artifacts section
          
          ### 🔐 Login Credentials
          - **CPF**: `123.456.789-00` + **Senha**: `123456`
          - **Código**: `MOT001` + **Senha**: `123456`
          - **Admin**: `admin` + **Senha**: `123456`
          
          ### 📱 Installation
          1. Download the ${{ env.BUILD_TYPE }} file
          2. Enable "Unknown sources" on Android
          3. Install and enjoy!
        draft: false
        prerelease: false

