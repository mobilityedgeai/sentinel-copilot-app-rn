name: Build Android APK (Ultra Simple)

on:
  push:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        
    - name: Setup Java 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      
    - name: Install dependencies
      run: npm install
        
    - name: Create Firebase config
      run: |
        cat > firebase-service-account.json << EOF
        {
          "type": "service_account",
          "project_id": "sentinel-ai-769c5",
          "private_key_id": "${{ secrets.FIREBASE_PRIVATE_KEY_ID }}",
          "private_key": "${{ secrets.FIREBASE_PRIVATE_KEY }}",
          "client_email": "${{ secrets.FIREBASE_CLIENT_EMAIL }}",
          "client_id": "${{ secrets.FIREBASE_CLIENT_ID }}",
          "auth_uri": "https://accounts.google.com/o/oauth2/auth",
          "token_uri": "https://oauth2.googleapis.com/token",
          "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
          "client_x509_cert_url": "${{ secrets.FIREBASE_CLIENT_CERT_URL }}"
        }
        EOF
        
    - name: Create basic assets
      run: |
        mkdir -p assets
        echo "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNkYPhfDwAChwGA60e6kgAAAABJRU5ErkJggg==" | base64 -d > assets/icon.png
        cp assets/icon.png assets/splash.png
        cp assets/icon.png assets/adaptive-icon.png
        cp assets/icon.png assets/favicon.png
        
    - name: Install Expo CLI
      run: npm install -g @expo/cli
      
    - name: Fix dependencies
      run: npx expo install --fix
      
    - name: Clean and prebuild
      run: |
        rm -rf android ios
        npx expo prebuild --platform android
        
    - name: Verify Android project
      run: |
        if [ ! -d "android" ]; then
          echo "❌ Android directory not created"
          exit 1
        fi
        echo "✅ Android project created"
        ls -la android/
        
    - name: Configure Gradle
      run: |
        cd android
        
        # Make gradlew executable
        chmod +x ./gradlew
        
        # Create optimized gradle.properties for CI/CD
        cat > gradle.properties << EOF
        # Gradle optimization for CI/CD
        org.gradle.jvmargs=-Xmx8g -XX:MaxMetaspaceSize=2g -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8
        org.gradle.parallel=true
        org.gradle.configureondemand=false
        org.gradle.daemon=false
        org.gradle.caching=false
        org.gradle.workers.max=2
        
        # Android optimization
        android.useAndroidX=true
        android.enableJetifier=true
        android.enableR8.fullMode=false
        android.enableBuildCache=false
        android.enableD8=true
        android.enableAapt2=true
        android.enableIncrementalDesugaring=false
        
        # Disable unnecessary features for CI
        android.enablePngCrunching=false
        android.enableResourceOptimizations=false
        android.enableSeparateAnnotationProcessing=false
        
        # Memory and performance
        kapt.use.worker.api=false
        kapt.incremental.apt=false
        EOF
        
        echo "✅ Gradle configured for CI/CD"
        
    - name: Build Debug APK with detailed logging
      run: |
        cd android
        
        echo "🔍 ===== DETAILED BUILD DIAGNOSTICS ====="
        echo "📅 Build started at: $(date)"
        echo "🖥️  System info:"
        uname -a
        echo "💾 Memory info:"
        free -h
        echo "💿 Disk space:"
        df -h
        echo "☕ Java version:"
        java -version
        echo "🤖 Android SDK info:"
        echo "ANDROID_HOME: $ANDROID_HOME"
        echo "ANDROID_SDK_ROOT: $ANDROID_SDK_ROOT"
        ls -la $ANDROID_HOME/platforms/ || echo "No platforms found"
        ls -la $ANDROID_HOME/build-tools/ || echo "No build-tools found"
        echo ""
        
        echo "🔧 ===== GRADLE DIAGNOSTICS ====="
        echo "📋 Gradle wrapper version:"
        ./gradlew --version || echo "Gradle version check failed"
        echo "📋 Gradle properties:"
        cat gradle.properties || echo "No gradle.properties found"
        echo "📋 Project structure:"
        find . -maxdepth 2 -type d | sort
        echo "📋 Build files:"
        find . -name "build.gradle*" -o -name "settings.gradle*" | head -10
        echo ""
        
        echo "🔍 ===== PRE-BUILD CHECKS ====="
        echo "📱 Android manifest:"
        find . -name "AndroidManifest.xml" | head -5
        echo "📦 Dependencies check:"
        ./gradlew dependencies --configuration debugCompileClasspath | head -20 || echo "Dependencies check failed"
        echo "🧹 Clean check:"
        ./gradlew clean --dry-run || echo "Clean dry-run failed"
        echo ""
        
        # Function to attempt build with extensive logging
        attempt_build_with_logging() {
          local strategy=$1
          local attempt=$2
          echo "🚀 ===== BUILD ATTEMPT $attempt: $strategy ====="
          echo "⏰ Started at: $(date)"
          
          # Create log file for this attempt
          local log_file="build_${strategy}_${attempt}.log"
          
          case $strategy in
            "basic")
              echo "🔨 Trying basic build with full logging..."
              timeout 600 ./gradlew assembleDebug \
                --no-daemon \
                --stacktrace \
                --info \
                --debug \
                --scan \
                2>&1 | tee "$log_file"
              ;;
            "single-thread")
              echo "🔨 Trying single-thread build..."
              timeout 600 ./gradlew assembleDebug \
                --no-daemon \
                --stacktrace \
                --info \
                --max-workers=1 \
                --no-parallel \
                2>&1 | tee "$log_file"
              ;;
            "minimal")
              echo "🔨 Trying minimal build..."
              timeout 600 ./gradlew assembleDebug \
                --no-daemon \
                --stacktrace \
                --quiet \
                --no-parallel \
                --offline \
                2>&1 | tee "$log_file"
              ;;
            "verbose")
              echo "🔨 Trying verbose build with maximum logging..."
              timeout 600 ./gradlew assembleDebug \
                --no-daemon \
                --stacktrace \
                --info \
                --debug \
                --warning-mode all \
                2>&1 | tee "$log_file"
              ;;
          esac
          
          local exit_code=$?
          echo "⏰ Finished at: $(date)"
          echo "📊 Exit code: $exit_code"
          
          if [ $exit_code -eq 0 ]; then
            echo "✅ Build successful with strategy: $strategy"
            return 0
          elif [ $exit_code -eq 124 ]; then
            echo "⏰ Build timed out (10 minutes) with strategy: $strategy"
          else
            echo "❌ Build failed with exit code $exit_code using strategy: $strategy"
          fi
          
          echo "📋 Last 50 lines of build log:"
          tail -50 "$log_file" || echo "Could not read log file"
          echo ""
          
          # Check for specific error patterns
          echo "🔍 Analyzing errors in log:"
          if grep -i "out of memory\|OutOfMemoryError" "$log_file"; then
            echo "💾 MEMORY ERROR detected"
          fi
          if grep -i "permission denied\|access denied" "$log_file"; then
            echo "🔒 PERMISSION ERROR detected"
          fi
          if grep -i "network\|connection\|timeout" "$log_file"; then
            echo "🌐 NETWORK ERROR detected"
          fi
          if grep -i "space\|disk full" "$log_file"; then
            echo "💿 DISK SPACE ERROR detected"
          fi
          if grep -i "compilation failed\|compile error" "$log_file"; then
            echo "🔨 COMPILATION ERROR detected"
          fi
          if grep -i "dependency\|resolution\|artifact" "$log_file"; then
            echo "📦 DEPENDENCY ERROR detected"
          fi
          echo ""
          
          return $exit_code
        }
        
        echo "🎯 ===== STARTING BUILD ATTEMPTS ====="
        
        # Try different build strategies with detailed logging
        if attempt_build_with_logging "basic" "1"; then
          echo "🎉 SUCCESS: Basic build completed!"
        elif attempt_build_with_logging "single-thread" "2"; then
          echo "🎉 SUCCESS: Single-thread build completed!"
        elif attempt_build_with_logging "minimal" "3"; then
          echo "🎉 SUCCESS: Minimal build completed!"
        elif attempt_build_with_logging "verbose" "4"; then
          echo "🎉 SUCCESS: Verbose build completed!"
        else
          echo "💥 ===== ALL BUILD STRATEGIES FAILED ====="
          echo "📊 Final system state:"
          free -h
          df -h
          echo ""
          
          echo "📋 All log files created:"
          ls -la *.log || echo "No log files found"
          echo ""
          
          echo "🔍 Summary of all errors:"
          for log in *.log; do
            if [ -f "$log" ]; then
              echo "--- Errors from $log ---"
              grep -i "error\|exception\|failed" "$log" | tail -10
            fi
          done
          
          echo ""
          echo "📱 Checking if any APK was partially built:"
          find . -name "*.apk" -o -name "*.aab" | head -10
          
          exit 1
        fi
        
    - name: Find APK
      run: |
        echo "🔍 ===== SEARCHING FOR GENERATED APK ====="
        echo "📱 Searching in all possible locations..."
        
        # Search for APK files in common locations
        echo "🔍 Searching for *.apk files:"
        find . -name "*.apk" -type f 2>/dev/null | head -20
        
        echo "🔍 Searching for *.aab files:"
        find . -name "*.aab" -type f 2>/dev/null | head -10
        
        echo "🔍 Checking specific build output directories:"
        ls -la app/build/outputs/apk/ 2>/dev/null || echo "app/build/outputs/apk/ not found"
        ls -la app/build/outputs/apk/debug/ 2>/dev/null || echo "app/build/outputs/apk/debug/ not found"
        ls -la app/build/outputs/apk/release/ 2>/dev/null || echo "app/build/outputs/apk/release/ not found"
        
        echo "🔍 Checking alternative paths:"
        ls -la build/outputs/apk/ 2>/dev/null || echo "build/outputs/apk/ not found"
        ls -la build/outputs/apk/debug/ 2>/dev/null || echo "build/outputs/apk/debug/ not found"
        
        echo "🔍 Checking all build directories:"
        find . -type d -name "outputs" 2>/dev/null | head -10
        find . -type d -name "apk" 2>/dev/null | head -10
        
        # Try to find APK in multiple possible locations
        APK_PATH=""
        
        # Check common APK locations
        for path in \
          "app/build/outputs/apk/debug/*.apk" \
          "app/build/outputs/apk/release/*.apk" \
          "build/outputs/apk/debug/*.apk" \
          "build/outputs/apk/release/*.apk" \
          "*/build/outputs/apk/debug/*.apk" \
          "*/build/outputs/apk/release/*.apk"
        do
          echo "🔍 Checking pattern: $path"
          for file in $path; do
            if [ -f "$file" ]; then
              APK_PATH="$file"
              echo "✅ Found APK: $APK_PATH"
              break 2
            fi
          done
        done
        
        # If still not found, search everywhere
        if [ -z "$APK_PATH" ]; then
          echo "🔍 Comprehensive search for any APK file..."
          APK_PATH=$(find . -name "*.apk" -type f | head -1)
        fi
        
        if [ -n "$APK_PATH" ] && [ -f "$APK_PATH" ]; then
          echo "🎉 APK FOUND: $APK_PATH"
          
          # Get APK info
          APK_SIZE=$(du -h "$APK_PATH" | cut -f1)
          APK_NAME=$(basename "$APK_PATH")
          
          echo "📱 APK Details:"
          echo "  File: $APK_NAME"
          echo "  Path: $APK_PATH"
          echo "  Size: $APK_SIZE"
          
          # Create output directory and copy APK
          mkdir -p build-output
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          OUTPUT_NAME="sentinel-copilot-debug-${TIMESTAMP}.apk"
          cp "$APK_PATH" "build-output/$OUTPUT_NAME"
          
          echo "✅ APK copied to: build-output/$OUTPUT_NAME"
          ls -la build-output/
          
          # Export for next steps
          echo "APK_FILE=$OUTPUT_NAME" >> $GITHUB_ENV
          echo "APK_SIZE=$APK_SIZE" >> $GITHUB_ENV
          echo "APK_PATH=build-output/$OUTPUT_NAME" >> $GITHUB_ENV
          
        else
          echo "❌ NO APK FOUND ANYWHERE"
          echo "🔍 Complete directory structure:"
          find . -type f -name "*.apk" -o -name "*.aab" -o -name "*.jar" | head -20
          echo ""
          echo "🔍 Build directories content:"
          find . -type d -name "build" -exec ls -la {} \; 2>/dev/null | head -50
          exit 1
        fi
        
    - name: Upload APK
      uses: actions/upload-artifact@v4
      with:
        name: sentinel-copilot-debug-apk
        path: build-output/*.apk
        retention-days: 30
        
    - name: Create Release
      if: github.ref == 'refs/heads/main'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v1.0.${{ github.run_number }}
        release_name: Sentinel Copilot v1.0.${{ github.run_number }}
        body: |
          🚀 **Sentinel Copilot Mobile App - Debug Build**
          
          📱 **APK Gerado**: ${{ env.APK_FILE }}
          🔧 **Tipo**: Debug (para testes)
          📅 **Data**: ${{ github.event.head_commit.timestamp }}
          
          🔐 **Login:**
          - CPF: 123.456.789-00 | Senha: 123456
          - Código: MOT001 | Senha: 123456
          
        draft: false
        prerelease: false

