name: Build Android APK (Ultra Simple)

on:
  push:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        
    - name: Setup Java 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      
    - name: Install dependencies
      run: npm install
        
    - name: Create Firebase config
      run: |
        cat > firebase-service-account.json << EOF
        {
          "type": "service_account",
          "project_id": "sentinel-ai-769c5",
          "private_key_id": "${{ secrets.FIREBASE_PRIVATE_KEY_ID }}",
          "private_key": "${{ secrets.FIREBASE_PRIVATE_KEY }}",
          "client_email": "${{ secrets.FIREBASE_CLIENT_EMAIL }}",
          "client_id": "${{ secrets.FIREBASE_CLIENT_ID }}",
          "auth_uri": "https://accounts.google.com/o/oauth2/auth",
          "token_uri": "https://oauth2.googleapis.com/token",
          "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
          "client_x509_cert_url": "${{ secrets.FIREBASE_CLIENT_CERT_URL }}"
        }
        EOF
        
    - name: Create basic assets
      run: |
        mkdir -p assets
        echo "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNkYPhfDwAChwGA60e6kgAAAABJRU5ErkJggg==" | base64 -d > assets/icon.png
        cp assets/icon.png assets/splash.png
        cp assets/icon.png assets/adaptive-icon.png
        cp assets/icon.png assets/favicon.png
        
    - name: Install Expo CLI
      run: npm install -g @expo/cli
      
    - name: Fix dependencies
      run: npx expo install --fix
      
    - name: Clean and prebuild
      run: |
        rm -rf android ios
        npx expo prebuild --platform android
        
    - name: Verify Android project
      run: |
        if [ ! -d "android" ]; then
          echo "❌ Android directory not created"
          exit 1
        fi
        echo "✅ Android project created"
        ls -la android/
        
    - name: Configure Gradle
      run: |
        cd android
        
        # Make gradlew executable
        chmod +x ./gradlew
        
        # Create optimized gradle.properties for CI/CD
        cat > gradle.properties << EOF
        # Gradle optimization for CI/CD
        org.gradle.jvmargs=-Xmx8g -XX:MaxMetaspaceSize=2g -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8
        org.gradle.parallel=true
        org.gradle.configureondemand=false
        org.gradle.daemon=false
        org.gradle.caching=false
        org.gradle.workers.max=2
        
        # Android optimization
        android.useAndroidX=true
        android.enableJetifier=true
        android.enableR8.fullMode=false
        android.enableBuildCache=false
        android.enableD8=true
        android.enableAapt2=true
        android.enableIncrementalDesugaring=false
        
        # Disable unnecessary features for CI
        android.enablePngCrunching=false
        android.enableResourceOptimizations=false
        android.enableSeparateAnnotationProcessing=false
        
        # Memory and performance
        kapt.use.worker.api=false
        kapt.incremental.apt=false
        EOF
        
        echo "✅ Gradle configured for CI/CD"
        
    - name: Build Debug APK with retries
      run: |
        cd android
        
        # Function to attempt build with different strategies
        attempt_build() {
          local strategy=$1
          echo "🔨 Attempting build with strategy: $strategy"
          
          case $strategy in
            "basic")
              ./gradlew assembleDebug --no-daemon --stacktrace --info
              ;;
            "single-thread")
              ./gradlew assembleDebug --no-daemon --stacktrace --info --max-workers=1
              ;;
            "minimal")
              ./gradlew assembleDebug --no-daemon --stacktrace --quiet --no-parallel
              ;;
            "offline")
              ./gradlew assembleDebug --no-daemon --stacktrace --offline --no-parallel
              ;;
          esac
        }
        
        # Try different build strategies
        if attempt_build "basic"; then
          echo "✅ Basic build successful"
        elif attempt_build "single-thread"; then
          echo "✅ Single-thread build successful"  
        elif attempt_build "minimal"; then
          echo "✅ Minimal build successful"
        elif attempt_build "offline"; then
          echo "✅ Offline build successful"
        else
          echo "❌ All build strategies failed"
          echo "🔍 Checking for common issues..."
          
          # Check available space
          df -h
          
          # Check memory
          free -h
          
          # Check Gradle daemon status
          ./gradlew --status || true
          
          # List build outputs for debugging
          find . -name "*.log" -o -name "*.txt" | head -10
          
          exit 1
        fi
        
    - name: Find APK
      run: |
        APK_PATH=$(find android -name "*.apk" -type f | head -1)
        if [ -n "$APK_PATH" ]; then
          mkdir -p build-output
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          cp "$APK_PATH" "build-output/sentinel-copilot-debug-${TIMESTAMP}.apk"
          echo "✅ APK found and copied"
          ls -la build-output/
          echo "APK_FILE=sentinel-copilot-debug-${TIMESTAMP}.apk" >> $GITHUB_ENV
        else
          echo "❌ No APK found"
          find android -name "*.apk" -o -name "*.aab"
          exit 1
        fi
        
    - name: Upload APK
      uses: actions/upload-artifact@v4
      with:
        name: sentinel-copilot-debug-apk
        path: build-output/*.apk
        retention-days: 30
        
    - name: Create Release
      if: github.ref == 'refs/heads/main'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v1.0.${{ github.run_number }}
        release_name: Sentinel Copilot v1.0.${{ github.run_number }}
        body: |
          🚀 **Sentinel Copilot Mobile App - Debug Build**
          
          📱 **APK Gerado**: ${{ env.APK_FILE }}
          🔧 **Tipo**: Debug (para testes)
          📅 **Data**: ${{ github.event.head_commit.timestamp }}
          
          🔐 **Login:**
          - CPF: 123.456.789-00 | Senha: 123456
          - Código: MOT001 | Senha: 123456
          
        draft: false
        prerelease: false

